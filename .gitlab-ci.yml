stages:
  - train
  - clean_up

train-model:
  stage: train
  script:
    - echo "## Training...."
    - echo "$CI_PROJECT_PATH"
    - echo "$CI_COMMIT_BRANCH" 
    - echo "$CI_PROJECT_DIR" 
    - echo "$CI_BUILDS_DIR" 
    # - raise error
    
    - Invoke-WebRequest -URI "https://avc-api.azurewebsites.net/api/model/$CI_COMMIT_BRANCH/trainning" -UseBasicParsing -Method Put

    #Unzip
    - tar -xf traindata.zip
    - cd labels 
    - move *.txt ..\imgs 
    - cd ..

    - cd D:\Docker\AVC-EdgeTPU-Compiler\edgetpu-compiler\x64\data
    - if( Test-Path -Path imgs) {rm -r -Force imgs}

    - move $CI_PROJECT_DIR/imgs imgs
    - cd ..

    #Create_train_test_file
    - conda run -n yolo2keras_env python create_train_test.py -tp 0.2
    #get_applying_id
    - $APPLYING_ID = (Invoke-WebRequest -URI https://avc-api.azurewebsites.net/api/model/applyingid -UseBasicParsing).Content

    #Train_model
    - cp D:\Docker\AVC-EdgeTPU-Compiler\edgetpu-compiler\models\$APPLYING_ID.weights .
    # - Start-Process -NoNewWindow -Wait -FilePath "C:\Program Files\Docker\Docker\Docker Desktop.exe" 
    - Start-Process -NoNewWindow -Wait -FilePath "D:\Docker\AVC-EdgeTPU-Compiler\edgetpu-compiler\x64\darknet.exe" -ArgumentList "detector train data/custom.data coco-tiny-v3-relu.cfg $APPLYING_ID.weights -map -clear"

    - cd backup
    - Rename-Item -Path "coco-tiny-v3-relu_best.weights" -NewName "$CI_COMMIT_BRANCH.weights" -Force
    - cd ..\..
    - Move-Item -Path x64\backup\$CI_COMMIT_BRANCH.weights -Destination models -Force
    - cd keras-yolo3
    - conda run -n yolo2keras_env python convert.py coco-tiny-v3-relu.cfg ..\models\$CI_COMMIT_BRANCH.weights avc.h5

    #Convert_tflite
    - conda run -n tflite_env python keras_to_tflite_quant.py avc.h5 ..\avc_model.tflite

    - cd ..
    - docker run --rm -v ${pwd}:/home/edgetpu edgetpu-compiler-avc edgetpu_compiler avc_model.tflite
    - Rename-Item -Path "avc_model_edgetpu.tflite" -NewName "$CI_COMMIT_BRANCH.tflite"
    - Move-Item -Path "$CI_COMMIT_BRANCH.tflite" -Destination "$CI_PROJECT_DIR" -Force

    - Remove-Item avc_model.tflite


    # Push new model back to the repository.
    - cd $CI_PROJECT_DIR
    - git config --global user.email "sangnvse130361@fpt.edu.vn"
    - git config --global user.name "Sang Ngo"
    - git add .
    - git commit -m "Trained successfully"
    - git remote show origin
    # - git remote rm origin
    - git remote set-url --push origin git@gitlab.com:$CI_PROJECT_PATH
    - ssh-keyscan www.gitlab.com >> C:\Users\Shang\.ssh\known_hosts
    # - git remote set-url --fetch origin git@gitlab.com:$CI_PROJECT_PATH
    - git remote show origin
    - git push --follow-tags origin HEAD:$CI_COMMIT_REF_NAME -o ci.skip
    - Invoke-WebRequest -URI "https://avc-api.azurewebsites.net/api/model/$CI_COMMIT_BRANCH/succession" -UseBasicParsing -Method Put
  tags:
    - worker
  except:
    - default
    - master



handle_error:
  stage: clean_up
  script:
    - echo "Clear mÃ¡y cho Sang"
    - Invoke-WebRequest -URI "https://avc-api.azurewebsites.net/api/model/$CI_COMMIT_BRANCH/failure" -UseBasicParsing -Method Put
  when: on_failure
  tags:
    - worker
  except:
    - default
    - master

before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  ##
  ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
  ## with your own domain name. You can copy and repeat that command if you have
  ## more than one server to connect to.
  ##
  - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

  ##
  ## Alternatively, assuming you created the SSH_SERVER_HOSTKEYS variable
  ## previously, uncomment the following two lines instead.
  ##
  #- echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'
  #- chmod 644 ~/.ssh/known_hosts

  ##
  ## You can optionally disable host key checking. Be aware that by adding that
  ## you are suspectible to man-in-the-middle attacks.
  ## WARNING: Use this only with the Docker executor, if you use it with shell
  ## you will overwrite your user's SSH config.
  ##
  #- '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  ##
  ## Optionally, if you will be using any Git commands, set the user name and
  ## email.
  ##
  - git config --global user.email "huytmse130336@fpt.edu.vn"
  - git config --global user.name "Minh Huy"

test_git: 
  stage: train
  script: 
    - ssh-keyscan gitlab.com
    - echo "Hello" >> test.txt
    - git add .
    - git commit -m "Trained successfully"
    - git remote show origin
    - git remote set-url --push origin git@gitlab.com:$CI_PROJECT_PATH
    - git push --follow-tags origin HEAD:$CI_COMMIT_REF_NAME -o ci.skip
  tags:
    - kay
